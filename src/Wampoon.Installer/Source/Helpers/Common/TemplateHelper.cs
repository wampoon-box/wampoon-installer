using System;
using System.IO;
using System.Threading.Tasks;

namespace Wampoon.Installer.Helpers.Common
{
    public static class TemplateHelper
    {
        public static async Task CopyTemplateWithVersionAsync(string templatePath, string targetPath)
        {
            if (!File.Exists(templatePath))
                throw new FileNotFoundException($"Template file not found: {templatePath}");

            var templateContent = File.ReadAllText(templatePath);
            var modifiedContent = AddVersionToConfigFile(templateContent);
            
            var targetDirectory = Path.GetDirectoryName(targetPath);
            if (!Directory.Exists(targetDirectory))
                Directory.CreateDirectory(targetDirectory);
            
            File.WriteAllText(targetPath, modifiedContent);
        }

        public static string AddVersionToConfigFile(string templateContent)
        {
            var version = GetInstallerVersion();
            var date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            
            // Replace in different comment styles for different file types.
            templateContent = templateContent.Replace($"# Generated by WAMPoon Installer", $"# Generated by WAMPoon Installer - v{version} on {date}");
            templateContent = templateContent.Replace("; Generated by WAMPoon Installer", $"; Generated by WAMPoon Installer - v{version} on {date}");
            templateContent = templateContent.Replace(" * Generated by WAMPoon Installer", $" * Generated by WAMPoon Installer - v{version} on {date}");
            
            return templateContent;
        }

        public static string GetTemplatePath(string templateFileName)
        {
            var exeDir = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            // Add .template suffix if not already present.
            if (!templateFileName.EndsWith(".template"))
            {
                templateFileName += ".template";
            }
            return Path.Combine(exeDir, "config-templates", templateFileName);
        }

        private static string GetInstallerVersion()
        {
            try
            {
                var assembly = System.Reflection.Assembly.GetExecutingAssembly();
                var version = assembly.GetName().Version;
                return $"{version.Major}.{version.Minor}.{version.Build}";
            }
            catch
            {
                return "Unknown";
            }
        }
    }
}